{"version":3,"sources":["App.js","reportWebVitals.js","index.js"],"names":["timeConverter","UNIX_timestamp","a","Date","getFullYear","getMonth","getDate","getHours","getMinutes","getSeconds","App","kws","useRef","useState","list","setList","info","setInfo","useEffect","current","KevaWS","connect","init","namespace","setNamespace","onSubmit","event","test","getNamespaceIdFromShortCode","nsId","getKeyValues","results","data","getNamespaceInfo","namespaceId","console","log","listComp","map","e","index","className","key","time","value","namespaceInfo","displayName","shortCode","style","fontSize","color","fontWeight","type","placeholder","marginRight","onChange","currentTarget","onClick","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qXAIA,SAASA,EAAcC,GACrB,IAAIC,EAAI,IAAIC,KAAsB,IAAjBF,GAQjB,OAPWC,EAAEE,cAMQ,KALTF,EAAEG,WAAa,GAKQ,IAJxBH,EAAEI,UAImC,IAHrCJ,EAAEK,WAGgD,KAFnDL,EAAEM,aAAe,GAAK,IAAMN,EAAEM,aAAeN,EAAEM,cAEgB,KAD/DN,EAAEO,aAAe,GAAK,IAAMP,EAAEO,aAAeP,EAAEO,cAyF5CC,MApFf,WAEE,IAAMC,EAAMC,iBAAO,MACnB,EAAwBC,mBAAS,IAAjC,mBAAOC,EAAP,KAAaC,EAAb,KACA,EAAwBF,mBAAS,IAAjC,mBAAOG,EAAP,KAAaC,EAAb,KAEAC,qBAAU,YACE,uCAAG,sBAAAhB,EAAA,6DACXS,EAAIQ,QAAU,IAAIC,IAAO,+BADd,SAELT,EAAIQ,QAAQE,UAFP,2CAAH,qDAIVC,KACC,IAEH,MAAkCT,mBAAS,IAA3C,mBAAOU,EAAP,KAAkBC,EAAlB,KAEMC,EAAQ,uCAAG,WAAOC,GAAP,uBAAAxB,EAAA,kEAEbe,EAAQ,KACI,QAAQU,KAAKJ,GAHZ,iCAMQZ,EAAIQ,QAAQS,4BAA4BL,GANhD,UAMLM,EANK,yEAUWlB,EAAIQ,QAAQW,aAAaD,GAVpC,eAULE,EAVK,OAWXhB,EAAQgB,EAAQC,MAXL,UAYMrB,EAAIQ,QAAQc,iBAAiBJ,GAZnC,SAYPb,EAZO,QAaNkB,YAAcL,EACnBZ,EAAQD,GAdG,yCAgBWL,EAAIQ,QAAQW,aAAaP,GAhBpC,eAgBLQ,EAhBK,OAiBXhB,EAAQgB,EAAQC,MAjBL,UAkBMrB,EAAIQ,QAAQc,iBAAiBV,GAlBnC,SAkBPP,EAlBO,QAmBNkB,YAAcX,EACnBN,EAAQD,GApBG,0DAuBbmB,QAAQC,IAAR,MAvBa,0DAAH,sDA+BRC,EAAWvB,EAAKwB,KAAI,SAACC,EAAGC,GAC5B,OACE,sBAAKC,UAAU,eAAf,UACE,mBAAGA,UAAU,SAAb,SAAuBF,EAAEG,MACzB,mBAAGD,UAAU,UAAb,SAAwBzC,EAAcuC,EAAEI,QACxC,mBAAGF,UAAU,WAAb,SAAyBF,EAAEK,UAHMJ,MAQjCK,EACJ,qBAAKJ,UAAU,UAAf,SACE,mBAAGA,UAAU,eAAb,SAA6BzB,EAAK8B,YAAc,KAAO9B,EAAK+B,cAKhE,OACE,qBAAKN,UAAU,MAAf,SACE,yBAAQA,UAAU,aAAlB,UACE,gCACE,mBAAGO,MAAO,CAACC,SAAU,GAAIC,MAAO,UAAWC,WAAY,OAAvD,sCACA,mBAAGH,MAAO,CAACC,SAAU,GAAIE,WAAY,KAArC,+CACA,oBAAGH,MAAO,CAACC,SAAU,IAArB,wEAEE,uBAFF,+BAIA,uBAAOR,UAAU,WAAWW,KAAK,OAAOC,YAAY,6BAA6BL,MAAO,CAACM,YAAa,IAAKC,SA/BlG,SAAA7B,GACfF,EAAaE,EAAM8B,cAAcZ,UA+B3B,wBAAQH,UAAU,YAAYgB,QAAShC,EAAvC,mBAEAT,EAAK8B,YAAcD,EAAgB,KACnCR,QClFKqB,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,8BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.2acd5622.chunk.js","sourcesContent":["import './App.css';\nimport React, { useEffect, useState, useRef } from 'react';\nimport KevaWS from 'keva-api-js';\n\nfunction timeConverter(UNIX_timestamp) {\n  let a = new Date(UNIX_timestamp * 1000);\n  let year = a.getFullYear();\n  let month = a.getMonth() + 1;\n  let date = a.getDate();\n  let hour = a.getHours();\n  let min = a.getMinutes() < 10 ? '0' + a.getMinutes() : a.getMinutes();\n  let sec = a.getSeconds() < 10 ? '0' + a.getSeconds() : a.getSeconds();\n  let timeStr = year + '-' + month + '-' + date + ' ' + hour + ':' + min + ':' + sec ;\n  return timeStr;\n}\n\nfunction App() {\n\n  const kws = useRef(null);\n  const [list, setList] = useState([]);\n  const [info, setInfo] = useState({});\n\n  useEffect(() => {\n    const init = async () => {\n      kws.current = new KevaWS(\"wss://ec0.kevacoin.org:8443\");\n      await kws.current.connect();\n    }\n    init();\n  }, []);\n\n  const [namespace, setNamespace] = useState('');\n\n  const onSubmit = async (event) => {\n    try {\n      setInfo({});\n      let isNum = /^\\d+$/.test(namespace);\n      if (isNum) {\n        // The variable namespace actually is short code.\n        const nsId = await kws.current.getNamespaceIdFromShortCode(namespace);\n        if (!nsId) {\n          return;\n        }\n        const results = await kws.current.getKeyValues(nsId);\n        setList(results.data);\n        let info = await kws.current.getNamespaceInfo(nsId);\n        info.namespaceId = nsId;\n        setInfo(info);\n      } else {\n        const results = await kws.current.getKeyValues(namespace);\n        setList(results.data);\n        let info = await kws.current.getNamespaceInfo(namespace);\n        info.namespaceId = namespace;\n        setInfo(info);\n      }\n    } catch (err) {\n      console.log(err);\n    }\n  }\n\n  const onChange = event => {\n    setNamespace(event.currentTarget.value);\n  }\n\n  const listComp = list.map((e, index) => {\n    return (\n      <div className=\"ns-key-value\" key={index}>\n        <p className=\"ns-key\">{e.key}</p>\n        <p className=\"ns-time\">{timeConverter(e.time)}</p>\n        <p className=\"ns-value\">{e.value}</p>\n      </div>\n    );\n  });\n\n  const namespaceInfo = (\n    <div className=\"ns-info\">\n      <p className=\"ns-info-name\">{info.displayName + ' @' + info.shortCode}</p>\n      {/* <p className=\"ns-info-id\">{'Namespace ID: ' + info.namespaceId}</p> */}\n    </div>\n  );\n\n  return (\n    <div className=\"App\">\n      <header className=\"App-header\">\n        <div>\n          <p style={{fontSize: 18, color: \"#4169e1\", fontWeight: \"700\"}}>Under Active Development</p>\n          <p style={{fontSize: 14, fontWeight: 700}}>Serverless Keva Blockchain Viewer</p>\n          <p style={{fontSize: 14}}>\n            Enter Namespace ID, e.g. Nfw2WYkGoSKve74cCfEum67x8bFgpHygxg\n            <br/>Or short code, e.g. 32101\n          </p>\n          <input className=\"ns-input\" type=\"text\" placeholder=\"Namespace ID or Short Code\" style={{marginRight: 10}} onChange={onChange}/>\n          <button className=\"ns-button\" onClick={onSubmit}>Go</button>\n        </div>\n        { info.displayName ? namespaceInfo : null }\n        { listComp }\n      </header>\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}